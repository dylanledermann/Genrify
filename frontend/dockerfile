# syntax=docker/dockerfile:1

#############################################################################
# Base stage: set working directory and node version
FROM node:23-alpine AS base

RUN apk add --no-cache libc6-compat
WORKDIR /app

#############################################################################
# Dependencies stage: install all dependencies
FROM base AS deps

# Copy package files
COPY package.json package-lock.json* ./
RUN npm ci

#############################################################################
# Build stage: build the application
FROM deps AS builder

# Copy source files and build
COPY . .
ENV NEXT_TELEMETRY_DISABLED=1
RUN npm run build

#############################################################################
# Production dependencies stage: install only production dependencies
FROM base AS prod-deps

COPY package.json package-lock.json* ./
RUN npm ci --only=production

#############################################################################
# Runtime stage: create the final runtime image
FROM base AS runtime

WORKDIR /app

# Set production environment
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

# Create nextjs user and group
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs

# Copy production dependencies
COPY --from=prod-deps --chown=nextjs:nodejs /app/node_modules ./node_modules

# Copy built application
COPY --from=builder --chown=nextjs:nodejs /app/.next ./.next
COPY --from=builder --chown=nextjs:nodejs /app/package.json ./package.json

# Ensure .next directory has proper permissions
RUN chown -R nextjs:nodejs ./.next

USER nextjs

EXPOSE 3000

CMD ["npm", "start"]