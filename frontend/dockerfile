#############################################################################
# Default build config: set working directory and node version
FROM node:23-alpine AS base

#############################################################################
# Create stage for downloading dependencies
FROM base AS deps

RUN apk add --no-cache libc6-compat

WORKDIR /app

# Download dependencies as a separate step to take advantage of docker's caching
# Leverage a cache mount to speed up subsequent builds
# Leverage bind mount to avoid having to copy them into this layer
COPY package.json package-lock.json* ./
RUN npm ci

#############################################################################
# Create stage for building the app
FROM deps AS build

WORKDIR /app

# Copy source files into the image
COPY --from=deps --chown=nextjs:nodejs /app/node_modules ./node_modules
COPY . .

# Run the build script
RUN npm run build

#############################################################################
# Create new stage to run the app with minimal runtime deps
FROM base AS final

WORKDIR /app

# Set production node env
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

# Run the app as a non-root user
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# leverage output traces to reduce image size
COPY --from=build --chown=nextjs:nodejs /app/node_modules ./node_modules
COPY --from=build --chown=nextjs:nodejs /app/.next ./.next
COPY --from=build --chown=nextjs:nodejs /app/package.json ./package.json

USER nextjs

# Expose app port
EXPOSE 3000

# Run the app
CMD ["npm", "start"]